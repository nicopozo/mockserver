// Code generated by MockGen. DO NOT EDIT.
// Source: ./rule_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/nicopozo/mockserver/internal/model"
)

// MockRuleRepository is a mock of RuleRepository interface.
type MockRuleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRuleRepositoryMockRecorder
}

// MockRuleRepositoryMockRecorder is the mock recorder for MockRuleRepository.
type MockRuleRepositoryMockRecorder struct {
	mock *MockRuleRepository
}

// NewMockRuleRepository creates a new mock instance.
func NewMockRuleRepository(ctrl *gomock.Controller) *MockRuleRepository {
	mock := &MockRuleRepository{ctrl: ctrl}
	mock.recorder = &MockRuleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuleRepository) EXPECT() *MockRuleRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRuleRepository) Create(ctx context.Context, rule *model.Rule) (*model.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, rule)
	ret0, _ := ret[0].(*model.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRuleRepositoryMockRecorder) Create(ctx, rule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRuleRepository)(nil).Create), ctx, rule)
}

// Delete mocks base method.
func (m *MockRuleRepository) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRuleRepositoryMockRecorder) Delete(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRuleRepository)(nil).Delete), ctx, key)
}

// Get mocks base method.
func (m *MockRuleRepository) Get(ctx context.Context, key string) (*model.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(*model.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRuleRepositoryMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRuleRepository)(nil).Get), ctx, key)
}

// Search mocks base method.
func (m *MockRuleRepository) Search(ctx context.Context, params map[string]interface{}, paging model.Paging) (*model.RuleList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, params, paging)
	ret0, _ := ret[0].(*model.RuleList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockRuleRepositoryMockRecorder) Search(ctx, params, paging interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockRuleRepository)(nil).Search), ctx, params, paging)
}

// SearchByMethodAndPath mocks base method.
func (m *MockRuleRepository) SearchByMethodAndPath(ctx context.Context, method, path string) (*model.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchByMethodAndPath", ctx, method, path)
	ret0, _ := ret[0].(*model.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchByMethodAndPath indicates an expected call of SearchByMethodAndPath.
func (mr *MockRuleRepositoryMockRecorder) SearchByMethodAndPath(ctx, method, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchByMethodAndPath", reflect.TypeOf((*MockRuleRepository)(nil).SearchByMethodAndPath), ctx, method, path)
}

// Update mocks base method.
func (m *MockRuleRepository) Update(ctx context.Context, rule *model.Rule) (*model.Rule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, rule)
	ret0, _ := ret[0].(*model.Rule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRuleRepositoryMockRecorder) Update(ctx, rule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRuleRepository)(nil).Update), ctx, rule)
}
