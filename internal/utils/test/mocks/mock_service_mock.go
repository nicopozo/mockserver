// Code generated by MockGen. DO NOT EDIT.
// Source: ./mock_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/nicopozo/mockserver/internal/model"
)

// MockMockService is a mock of MockService interface.
type MockMockService struct {
	ctrl     *gomock.Controller
	recorder *MockMockServiceMockRecorder
}

// MockMockServiceMockRecorder is the mock recorder for MockMockService.
type MockMockServiceMockRecorder struct {
	mock *MockMockService
}

// NewMockMockService creates a new mock instance.
func NewMockMockService(ctrl *gomock.Controller) *MockMockService {
	mock := &MockMockService{ctrl: ctrl}
	mock.recorder = &MockMockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMockService) EXPECT() *MockMockServiceMockRecorder {
	return m.recorder
}

// SearchResponseForRequest mocks base method.
func (m *MockMockService) SearchResponseForRequest(ctx context.Context, request *http.Request, path, body string) (*model.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchResponseForRequest", ctx, request, path, body)
	ret0, _ := ret[0].(*model.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchResponseForRequest indicates an expected call of SearchResponseForRequest.
func (mr *MockMockServiceMockRecorder) SearchResponseForRequest(ctx, request, path, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchResponseForRequest", reflect.TypeOf((*MockMockService)(nil).SearchResponseForRequest), ctx, request, path, body)
}
