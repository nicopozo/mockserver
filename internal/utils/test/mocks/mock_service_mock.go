// Code generated by MockGen. DO NOT EDIT.
// Source: ./mock_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/nicopozo/mockserver/internal/model"
	http "net/http"
	reflect "reflect"
)

// MockIMockService is a mock of IMockService interface
type MockIMockService struct {
	ctrl     *gomock.Controller
	recorder *MockIMockServiceMockRecorder
}

// MockIMockServiceMockRecorder is the mock recorder for MockIMockService
type MockIMockServiceMockRecorder struct {
	mock *MockIMockService
}

// NewMockIMockService creates a new mock instance
func NewMockIMockService(ctrl *gomock.Controller) *MockIMockService {
	mock := &MockIMockService{ctrl: ctrl}
	mock.recorder = &MockIMockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIMockService) EXPECT() *MockIMockServiceMockRecorder {
	return m.recorder
}

// SearchResponseForRequest mocks base method
func (m *MockIMockService) SearchResponseForRequest(ctx context.Context, request *http.Request, path, body string) (*model.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchResponseForRequest", ctx, request, path, body)
	ret0, _ := ret[0].(*model.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchResponseForRequest indicates an expected call of SearchResponseForRequest
func (mr *MockIMockServiceMockRecorder) SearchResponseForRequest(ctx, request, path, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchResponseForRequest", reflect.TypeOf((*MockIMockService)(nil).SearchResponseForRequest), ctx, request, path, body)
}
