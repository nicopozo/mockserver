basePath: /mock-server
definitions:
  model.Assertion:
    properties:
      fail_on_error:
        type: boolean
      max:
        type: number
      min:
        type: number
      type:
        type: string
      value:
        type: string
    type: object
  model.Error:
    properties:
      cause:
        items:
          $ref: '#/definitions/model.ErrorCause'
        type: array
      error:
        example: Not Found
        type: string
      message:
        example: 'no rule found with key: banks_get_55603295'
        type: string
      status:
        example: 404
        type: integer
    type: object
  model.ErrorCause:
    properties:
      code:
        example: 1030
        type: integer
      description:
        example: Resource Not Found
        type: string
    type: object
  model.Paging:
    properties:
      limit:
        default: 30
        maximum: 1000
        minimum: 0
        type: integer
      offset:
        default: 0
        maximum: 1000
        minimum: 0
        type: integer
      total:
        type: integer
    type: object
  model.Response:
    properties:
      body:
        example: '{"id":5804214224, "payer_id": 548390723, "external_reference": "X281924481"}'
        type: string
      content_type:
        example: application/json
        type: string
      delay:
        example: 0
        type: integer
      http_status:
        example: 200
        type: integer
      scene:
        example: normal
        type: string
    type: object
  model.Rule:
    properties:
      group:
        example: payments
        type: string
      key:
        example: payments_get_556032950
        type: string
      method:
        example: GET
        type: string
      name:
        example: get payment
        type: string
      path:
        example: /v1/payments/{payment_id}
        type: string
      responses:
        items:
          $ref: '#/definitions/model.Response'
        type: array
      status:
        example: enabled
        type: string
      strategy:
        example: normal
        type: string
      variables:
        items:
          $ref: '#/definitions/model.Variable'
        type: array
    type: object
  model.RuleList:
    properties:
      paging:
        $ref: '#/definitions/model.Paging'
      results:
        items:
          $ref: '#/definitions/model.Rule'
        type: array
    type: object
  model.RuleStatus:
    properties:
      status:
        example: enabled
        type: string
    type: object
  model.Variable:
    properties:
      assertions:
        items:
          $ref: '#/definitions/model.Assertion'
        type: array
      key:
        example: $.nickname
        type: string
      name:
        example: nickname
        type: string
      type:
        example: body
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: nicopozo@gmail.com
    name: Nicolas Pozo
  description: Mock Server is intended to serve mocks for different APIs during development
    process.
  title: Mock Server
  version: "1.0"
paths:
  /rules:
    get:
      description: Search Rule by key, name, group, method or status
      operationId: search-rule
      parameters:
      - description: Rule key generated by service
        in: query
        name: key
        type: string
      - description: Name of the key
        in: query
        name: name
        type: string
      - description: Group
        in: query
        name: group
        type: string
      - description: Method
        in: query
        name: method
        type: string
      - description: Enabled/Disabled
        in: query
        name: status
        type: string
      - default: 30
        description: Max expected number of results
        in: query
        name: limit
        type: number
      - default: "0"
        description: number of results to be skipped
        in: query
        name: offset
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Result
          schema:
            $ref: '#/definitions/model.RuleList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Error'
      summary: Search Rule
      tags:
      - Rules
    post:
      consumes:
      - application/json
      description: Create a Rule for serving a mock response
      operationId: create-rule
      parameters:
      - description: The rule to be created
        in: body
        name: rule
        required: true
        schema:
          $ref: '#/definitions/model.Rule'
      produces:
      - application/json
      responses:
        "201":
          description: Rule successfully created
          schema:
            $ref: '#/definitions/model.Rule'
        "400":
          description: Validation of the rule failed
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      summary: Create a Rule
      tags:
      - Rules
  /rules/{key}:
    delete:
      description: Delete Rule by Key
      operationId: delete-rule
      parameters:
      - description: Key generated by service
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Error'
      summary: Delete Rule by key
      tags:
      - Rules
    get:
      description: Get a Rule, if not found return 404
      operationId: get-rule
      parameters:
      - description: Key generated by service
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Result
          schema:
            $ref: '#/definitions/model.Rule'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Error'
      summary: Get Rule by Key
      tags:
      - Rules
    put:
      consumes:
      - application/json
      description: Update an existing Rule for serving a mock response
      operationId: update-rule
      parameters:
      - description: Key of rule to update
        in: path
        name: key
        required: true
        type: string
      - description: The rule to be updated
        in: body
        name: rule
        required: true
        schema:
          $ref: '#/definitions/model.Rule'
      produces:
      - application/json
      responses:
        "200":
          description: Rule successfully updated
          schema:
            $ref: '#/definitions/model.Rule'
        "400":
          description: Validation of the rule failed
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      summary: Update a Rule
      tags:
      - Rules
  /rules/{key}/status:
    put:
      consumes:
      - application/json
      description: Update an existing Rule for serving a mock response
      operationId: update-rule-status
      parameters:
      - description: Key of rule to update
        in: path
        name: key
        required: true
        type: string
      - description: The rule to be updated
        in: body
        name: rule
        required: true
        schema:
          $ref: '#/definitions/model.RuleStatus'
      produces:
      - application/json
      responses:
        "200":
          description: Rule successfully updated
          schema:
            $ref: '#/definitions/model.Rule'
        "400":
          description: Validation of the rule failed
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/model.Error'
      summary: Update a Rule Status
      tags:
      - Rules
schemes:
- http
swagger: "2.0"
